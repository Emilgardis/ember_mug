var searchIndex = JSON.parse('{\
"ember_mug":{"doc":"Ember Mug | Rust crate for interacting with an Ember …","t":[13,3,13,13,13,13,13,13,13,13,13,3,4,13,13,13,13,13,7,17,3,13,13,13,13,13,13,13,4,13,3,13,4,13,13,13,3,13,13,13,13,13,3,13,4,13,4,13,13,13,13,13,13,4,13,13,13,13,3,4,13,3,13,13,13,13,4,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,5,5,5],"n":["AuthInfoNotFound","Battery","Battery","BatteryVoltageState","BtleConnectError","BtleError","BtleError","BtleError","Celsius","Charging","ColdNoTempControl","Color","ConnectError","ControlRegisterAddress","ControlRegisterData","Cooling","CurrentTemp","Dsk","EMBER_ASSIGNED_NUMBER","EMBER_MUG_SERVICE_UUID","EmberMug","Empty","Fahrenheit","Filling","FromUtf8Error","Heating","InvalidFormat","JoinError","KnownCharacteristic","LastLocation","LiquidLevel","LiquidLevel","LiquidState","LiquidState","MugColor","MugId","MugMeta","Name","NoDevice","NoSuchCharacteristic","NoSuchCharacteristic","NotCharging","Ota","Ota","PushEvent","PushEvents","ReadError","ReadError","RefreshBatteryLevel","RefreshDrinkTemperature","RefreshLiquidLevel","RefreshLiquidState","RefreshTargetTemperature","SearchError","SearchError","Statistics","TargetTemp","TargetTemperature","Temperature","TemperatureUnit","TemperatureUnit","TimeDateZone","TimeDateZone","Udsk","Unknown","WarmNoTempControl","WriteError","WriteError","a","all","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_box_any","as_box_any","as_box_any","as_box_any","as_box_any","as_box_any","as_box_any","b","battery","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btle","charge","clone","clone","clone_into","clone_into","command","connect_mug","eq","find_and_connect","firmware_version","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_degree","g","get","get_battery","get_characteristic","get_characteristic_on_service","get_characteristics","get_current_temperature","get_dsk","get_liquid_level","get_liquid_state","get_mug_color","get_mug_meta","get_name","get_ota","get_push_event","get_target_temperature","get_temperature_unit","get_time_date_zone","get_udsk","hardware_version","has_liquid","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_auth_info_not_found","is_battery_voltage_state","is_charging","is_cold_no_temp_control","is_cooling","is_empty","is_empty","is_filling","is_heating","is_not_charging","is_refresh_battery_level","is_refresh_drink_temperature","is_refresh_liquid_level","is_refresh_liquid_state","is_refresh_target_temperature","is_target_temperature","is_unknown","is_warm_no_temp_control","level","listen_push_events","mug_id","new","offset","provide","provide","provide","provide","r","read","read_deserialize","read_options","read_options","read_options","read_options","read_options","read_options","read_options","read_options","read_options","read_options","request","serial_number","set_mug_color","set_name","set_target_temperature","set_temperature_unit","set_time_date_zone","source","source","source","source","subscribe_push_events","temperature","temperature","to_degree","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unix_timestamp","unsubscribe_push_events","volt","write","write_options","write_options","write_options","write_options","write_options","get_mugs","get_mugs_on_adapters","search_adapter_for_ember"],"q":["ember_mugember_mug::btle","",""],"d":["Auth info missing","Battery information","The current battery level of the mug.","Battery voltage state changed","Couldn’t connect device","Search operation failed","Read from BLE failed","Write with BLE failed","Celcius","Charging","The mug is cold and temperature control is disabled","Color tint for an Ember Mug","Errors when trying to connect to an Ember Mug","Temperature lock address","Temperature lock data","The mug is cooling down to the target temperature","The current temperature of the mug’s contents.","Device Secret Key","Assigned Bluetooth company identifier for …","The UUID for the Ember Mug service","An Ember Mug device","The mug is empty","Fahrenheit","The mug is filling with liquid","Failed to convert string to valid UTF-8","The mug is heating up to the target temperature","Data to be written was invalid","Task join failed","All known characteristics of an Ember Mug","The last known location of the mug.","Level of the liquid","The current liquid level of the mug.","Represents the current state of the liquid in an Ember Mug","The state of the liquid in the mug (e.g. solid, liquid, …","The color of the mug.","The mug’s identifier.","Metadata for the device","The name of the mug.","No device found","Characteristic is missing / not present on device","Characteristic is missing / not present on device","Not Charging","Version information for the device","Firmware and hardware information (versions) for the mug.","Events to trigger updates in application state","Events that are sent from the mug","Errors when reading data from an Ember Mug","Reading of data failed","Refresh battery level","Refresh drink temperature","Refresh liquid level","Refresh liquid state","Refresh target temperature","Errors when searching for a device","Search failed","Statistics","The target temperature for the mug’s contents.","The mug’s liquid is at the target temperature","Temperature in a certain unit","Temperature unit/scale","The unit of temperature measurement used for the mug.","Time and date + timezone","The current time, date, and time zone of the mug.","(U?) Device Secret Key","The liquid state is unknown","The mug is warm and temperature control is disabled","Errors when writing data to an Ember Mug","Interpreting source data into bytes failed","Alpha value (0-255)","Get all known characteristics","","","","","","","","","","","","","","","","","","","","","","Blue value (0-255)","Battery percentage (5 - 100. Not scaled to 0 - 255)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Functions for communicating with BLE to connect to Ember …","Charging status. 1 for plugged in, 0 for unplugged","","","","","Send command to given characteristic on <code>uuid</code>","Connect to specific Ember Mug","","Find and connect to the first available Ember Mug","Firmware version","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Convert given degree to a temperature","Green value (0-255)","Get the UUID for this characteristic","Retrieves the battery percentage of the mug and other …","Get characteristic on <code>EMBER_MUG_SERVICE_UUID</code> with given …","Get characteristic on given service UUID with given UUID","Get all characteristics","Retrieves the current temperature of the mug","Retrieves the dsk of the cup","Retrieves the level of liquid present in the cup","The current state of the mug","Retrieves the color of the mug’s LED indicator.","Retrieves id of the mug","Retreives the name of the mug.","Info about the current firmware running on the mug.","Events sent by the mug for the application to register to.","Retrieves the target temperature of the mug","Retrieve the current unit of temperature used by the mug.","Get the current date and timezone on the mug","Retrieves the dsk of the cup","Hardware version","Mug has liquid","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the push event is <code>AuthInfoNotFound</code>.","Returns <code>true</code> if the push event is <code>BatteryVoltageState</code>.","Returns <code>true</code> if the push event is <code>Charging</code>.","Returns <code>true</code> if the liquid state is <code>ColdNoTempControl</code>.","Returns <code>true</code> if the liquid state is <code>Cooling</code>.","Mug is empty","Returns <code>true</code> if the liquid state is <code>Empty</code>.","Returns <code>true</code> if the liquid state is <code>Filling</code>.","Returns <code>true</code> if the liquid state is <code>Heating</code>.","Returns <code>true</code> if the push event is <code>NotCharging</code>.","Returns <code>true</code> if the push event is <code>RefreshBatteryLevel</code>.","Returns <code>true</code> if the push event is <code>RefreshDrinkTemperature</code>.","Returns <code>true</code> if the push event is <code>RefreshLiquidLevel</code>.","Returns <code>true</code> if the push event is <code>RefreshLiquidState</code>.","Returns <code>true</code> if the push event is <code>RefreshTargetTemperature</code>.","Returns <code>true</code> if the liquid state is <code>TargetTemperature</code>.","Returns <code>true</code> if the liquid state is <code>Unknown</code>.","Returns <code>true</code> if the liquid state is <code>WarmNoTempControl</code>.","The given amount of liquid","Get a stream of events sent by the mug","ID","Create a new known characteristic from UUID","Timezone offset (ex: GMT+03)","","","","","Red value (0-255)","Deserialize data on given characteristic with <code>uuid</code>","Read data from given characteristic with <code>uuid</code>","","","","","","","","","","","Send request to given characteristic on <code>uuid</code>","Serial number","Sets the color of the mug’s LED indicator.","Sets the name of the mug.","Set the target temperature of the mug","Set the current unit of temperature used by the mug.","A sink for the mug to store the current date and timezone","","","","","Subscribe to events sent by the mug","Battery temperature as UINT16 Little Endian, encoded like …","The temperature in integer value, use …","Convert value to degree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unix timestamp recorded by the app.","Unsubscribe to events sent by the mug","(Legacy) Most likely battery voltage","Write data to given characteristic on <code>uuid</code>","","","","","","Get mugs on all adapters","Search for mugs on all adapters","Search given adapter for a mug"],"i":[19,0,4,19,9,22,23,7,20,19,15,0,0,4,4,15,4,4,0,0,0,15,20,15,23,15,7,22,0,4,0,4,0,4,4,4,0,4,9,23,7,19,0,4,0,4,0,23,19,19,19,19,19,0,9,4,4,15,0,0,4,0,4,4,15,15,0,7,16,4,15,20,9,22,23,7,24,15,20,9,22,23,7,24,15,20,9,22,23,7,24,16,11,11,14,15,16,17,18,19,20,21,4,5,9,22,23,7,24,11,14,15,16,17,18,19,20,21,4,5,9,22,23,7,24,0,11,4,5,4,5,5,5,4,5,18,11,14,15,15,16,17,18,19,20,20,21,4,9,9,22,22,23,23,7,7,24,24,11,14,15,16,17,18,19,20,21,4,5,9,9,9,22,22,22,23,23,23,23,7,7,7,24,24,16,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,18,14,11,14,15,16,17,18,19,20,21,4,5,9,22,23,7,24,19,19,19,15,15,14,15,15,15,19,19,19,19,19,19,15,15,15,14,5,17,4,21,9,22,23,7,16,5,5,11,14,15,16,17,18,19,20,21,24,5,17,5,5,5,5,5,9,22,23,7,5,11,24,24,4,5,15,20,9,22,23,7,24,11,14,15,16,17,18,19,20,21,4,5,9,22,23,7,24,11,14,15,16,17,18,19,20,21,4,5,9,22,23,7,24,11,14,15,16,17,18,19,20,21,4,5,9,22,23,7,24,21,5,11,5,16,18,20,21,24,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[[3,[2]]],[[3,[1,2]]]],[[[3,[2]]],[[3,[1,2]]]],[[[3,[2]]],[[3,[1,2]]]],[[[3,[2]]],[[3,[1,2]]]],[[[3,[2]]],[[3,[1,2]]]],[[[3,[2]]],[[3,[1,2]]]],[[[3,[2]]],[[3,[1,2]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[4,4],[5,5],[[]],[[]],[[5,6],[[8,[7]]]],[[],[[8,[5,9]]]],[[4,4],10],[[],[[8,[5,9]]]],0,[[11,12],13],[[14,12],13],[[15,12],13],[[15,12],13],[[16,12],13],[[17,12],13],[[18,12],13],[[19,12],13],[[20,12],13],[[20,12],13],[[21,12],13],[[4,12],13],[[9,12],13],[[9,12],13],[[22,12],13],[[22,12],13],[[23,12],13],[[23,12],13],[[7,12],13],[[7,12],13],[[24,12],13],[[24,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,9],[22,9],[[]],[26,22],[25,22],[[]],[27,23],[[]],[28,23],[25,23],[[]],[25,7],[27,7],[[]],[29,24],0,[4,6],[5,[[8,[11,23]]]],[[5,6],[[31,[30]]]],[[5,6,6],[[31,[30]]]],[5,32],[5,[[8,[24,23]]]],[5,[[8,[[34,[33]],23]]]],[5,[[8,[14,23]]]],[5,[[8,[15,23]]]],[5,[[8,[16,23]]]],[5,[[8,[17,23]]]],[5,[[8,[35,23]]]],[5,[[8,[18,23]]]],[5,[[8,[19,23]]]],[5,[[8,[24,23]]]],[5,[[8,[20,23]]]],[5,[[8,[21,23]]]],[5,[[8,[[34,[33]],23]]]],0,[14,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,10],[19,10],[19,10],[15,10],[15,10],[14,10],[15,10],[15,10],[15,10],[19,10],[19,10],[19,10],[19,10],[19,10],[19,10],[15,10],[15,10],[15,10],0,[5,[[8,[[0,[36,37]],23]]]],0,[6,[[31,[4]]]],0,[38],[38],[38],[38],0,[[5,6],[[8,[[34,[33]],23]]]],[[5,6],[[8,[[0,[39,40]],23]]]],[41,[[42,[11]]]],[41,[[42,[14]]]],[41,[[42,[15]]]],[41,[[42,[16]]]],[41,[[42,[17]]]],[41,[[42,[18]]]],[41,[[42,[19]]]],[41,[[42,[20]]]],[41,[[42,[21]]]],[41,[[42,[24]]]],[[5,6],[[8,[7]]]],0,[[5,16],[[8,[7]]]],[[5,43],[[8,[7]]]],[[5,24],[[8,[7]]]],[[5,20],[[8,[7]]]],[[5,21],[[8,[7]]]],[9,[[31,[44]]]],[22,[[31,[44]]]],[23,[[31,[44]]]],[7,[[31,[44]]]],[5,[[8,[23]]]],0,0,[24,29],[[]],[[]],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],0,[5,[[8,[23]]]],0,[[5,46,6],[[8,[7]]]],[[16,47],42],[[18,47],42],[[20,47],42],[[21,47],42],[[24,47],42],[[],[[8,[36,22]]]],[[],36],[[48,[31,[49]]],[[8,[34,25]]]]],"p":[[8,"Any"],[3,"Global"],[3,"Box"],[4,"KnownCharacteristic"],[3,"EmberMug"],[3,"Uuid"],[4,"WriteError"],[4,"Result"],[4,"ConnectError"],[15,"bool"],[3,"Battery"],[3,"Formatter"],[6,"Result"],[3,"LiquidLevel"],[4,"LiquidState"],[3,"Color"],[3,"MugMeta"],[3,"Ota"],[4,"PushEvent"],[4,"TemperatureUnit"],[3,"TimeDateZone"],[4,"SearchError"],[4,"ReadError"],[3,"Temperature"],[4,"Error"],[3,"JoinError"],[4,"Error"],[3,"FromUtf8Error"],[15,"f32"],[3,"Characteristic"],[4,"Option"],[8,"Iterator"],[15,"u8"],[3,"Vec"],[3,"String"],[8,"Stream"],[8,"Send"],[3,"Demand"],[8,"BinRead"],[8,"ReadEndian"],[3,"ReadOptions"],[6,"BinResult"],[15,"str"],[8,"Error"],[3,"TypeId"],[4,"WriteType"],[3,"WriteOptions"],[3,"Adapter"],[3,"BDAddr"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
